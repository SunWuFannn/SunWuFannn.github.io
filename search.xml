<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>常用的SQL语句</title>
    <url>/2020/04/23/SQL/</url>
    <content><![CDATA[<h1 id="常用的SQL语句"><a href="#常用的SQL语句" class="headerlink" title="常用的SQL语句"></a>常用的SQL语句</h1><hr>
<h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><p>DDL是操作是数据库和表的SQL语句。</p>
<ol>
<li><p><strong>操作数据库</strong></p>
<ol>
<li><p>创建</p>
<ul>
<li>创建数据库<ul>
<li>CREATE DATABASE 数据库名称；</li>
</ul>
</li>
<li>创建数据库，判断不存在，再创建<ul>
<li>CREATE DATABASE IF NOT EXISTS 数据库名称；</li>
</ul>
</li>
<li>创建数据库，并指定字符集<ul>
<li>CREATE DATABASE 数据库名称 character set 字符集名；</li>
</ul>
</li>
<li>创建数据库，判断不存在，再创建，并指定字符集<ul>
<li>CREATE DATABASE IF NOT EXISTS 数据库名称 character set 字符集名；</li>
</ul>
</li>
</ul>
</li>
<li><p>查询</p>
<ul>
<li>查询所有数据库的名称<ul>
<li>SHOW DATABASES；</li>
</ul>
</li>
<li>查询某个数据库的字符集，查询某个数据库的查询语句<ul>
<li>SHOW CREATE DATABASE 数据库名称；</li>
</ul>
</li>
</ul>
</li>
<li><p>修改</p>
<ul>
<li>修改数据库的字符集<ul>
<li>ALTER DATABASE 数据库名称 character set 字符集名；</li>
</ul>
</li>
</ul>
</li>
<li><p>删除</p>
<ul>
<li>删除数据库<ul>
<li>DROP DATABASE 数据库名称；</li>
</ul>
</li>
<li>判断数据库存在，再删除<ul>
<li>DROP DATABASE IF EXISTS 数据库名称；</li>
</ul>
</li>
</ul>
</li>
<li><p>使用数据库</p>
<ul>
<li>查询当前正在使用的数据库名称<ul>
<li>SELECT DATABASE();</li>
</ul>
</li>
<li>使用数据库<ul>
<li>USE 数据库名称；</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>操作表</strong></p>
<ol>
<li><p>创建</p>
<ul>
<li><p>创建表</p>
<ul>
<li><p>CREATE TABLE 表名称(</p>
<p>  列名1，数据类型1，</p>
<p>  列名2，数据类型2，</p>
<p>  列名3，数据类型3，</p>
<p>  …….</p>
<p>  列名n，数据类型n</p>
<p>)；</p>
</li>
<li><p><em>注意最后一列后面不用加逗号*</em></p>
</li>
<li><p>SQL中常用的数据类型</p>
<ol>
<li>int：整数类型</li>
<li>double：小数类型</li>
<li>date：日期，只包含年月日，yyyy-MM-dd</li>
<li>datetime：日期，包含年月日时分秒，yyyy-MM-dd HH:mm:ss</li>
<li>timestamp：时间戳类型，包含年月日时分秒，不赋值时可以默认添加当前系统时间</li>
<li>varchar：字符串</li>
</ol>
</li>
</ul>
</li>
<li><p>复制表</p>
<ul>
<li>CREATE TABLE 表名 LIKE 被复制的表名；</li>
</ul>
</li>
</ul>
</li>
<li><p>查询</p>
<ul>
<li>查询某个数据库中所有表的名称<ul>
<li>SHOW TABLES；</li>
</ul>
</li>
<li>查询表结构<ul>
<li>DESC 表名称；</li>
</ul>
</li>
</ul>
</li>
<li><p>修改</p>
<ul>
<li>修改表名<ul>
<li>ALTER TABLE 表名称 RENAME TO 新的表名；</li>
</ul>
</li>
<li>修改表的字符集<ul>
<li>ALTER TABLE 表名称 character set 字符集名；</li>
</ul>
</li>
<li>添加一列<ul>
<li>ALTER TABLE 表名称 ADD 列名 数据类型；</li>
</ul>
</li>
<li>修改列名和类型<ul>
<li>ALTER TABLE 表名称 CHANGE 列名 新列名 新数据类型；</li>
<li>ALTER TABLE 表名称 MODIFY 列名 新数据类型；</li>
</ul>
</li>
<li>删除列<ul>
<li>ALTER TABLE 表名称 DROP 列名；</li>
</ul>
</li>
</ul>
</li>
<li><p>删除</p>
<ul>
<li>删除表<ul>
<li>DROP TABLE 表名称；</li>
</ul>
</li>
<li>判断表存在，再删除<ul>
<li>DROP TABLE IF EXISTS 表名称；</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><p>DML是增删改数据库的表中的数据的SQL语句。</p>
<ol>
<li><p>添加数据</p>
<ul>
<li><p>INSERT INTO 表名(列名1，列名2，列名3，…..列名n) VALUES(值1，值2，值3，…..值n);</p>
</li>
<li><p><em>注意：*</em></p>
</li>
</ul>
<ol>
<li><p>列名和值要一一对应。</p>
</li>
<li><p>如果表名后，不定义列名，则默认给所有列添加值。</p>
<ul>
<li>INSERT INTO 表名VALUES(值1，值2，值3，…..值n);</li>
</ul>
</li>
<li><p>除了数字类型，其他类型需要使用引号（单双引号都可以）引起来。</p>
</li>
</ol>
</li>
<li><p>删除数据</p>
<ul>
<li><p>DELETE FROM 表名 [WHERE 条件]；</p>
</li>
<li><p><em>注意：如果不加条件，则删除表中所有记录。*</em></p>
</li>
<li><p><strong>如果要删除表中所有记录，不推荐使用<code>DELETE FROM 表名；</code>，可以使用<code>TRUNCATE TABLE 表名；</code>。*</strong></p>
</li>
</ul>
</li>
<li><p>修改数据</p>
<ul>
<li><p>UPDATE 表名 SET 列名1=值1， 列名2=值2，….列名n=值n [WHERE 条件]；</p>
</li>
<li><p><em>注意：如果不加任何条件，则会将表中所有记录修改。*</em></p>
</li>
</ul>
</li>
</ol>
<h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><p>DQL是查询表中记录的SQL语句。</p>
<ul>
<li>SELECT * FROM 表名；</li>
</ul>
<p>语法：</p>
<pre><code>SELECT
    字段列表
FROM
    表名列表
WHERE
    条件列表
GROUP BY
    分组字段
HAVING
    分组之后的条件
ORDER BY
    排序
LIMIT
    分页限定</code></pre><ol>
<li><p>基础查询</p>
<ol>
<li><p>多个字段的查询</p>
<ul>
<li>SELECT 字段名1，字段名2… FROM 表名；</li>
</ul>
</li>
<li><p>去除重复</p>
<ul>
<li>SELECT DISTINCT 字段名1，字段名2… FROM 表名；</li>
</ul>
</li>
<li><p>计算列</p>
<ul>
<li>一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</li>
<li>IFNULL（表达式1，表达式2）：NULL参与的运算，计算结果都为NULL。<ul>
<li>表达式1：哪个字段需要判断是否为NULL。</li>
<li>表达式2：如果该字段为NULL后的替换值。</li>
</ul>
</li>
</ul>
</li>
<li><p>起别名</p>
<ul>
<li><p>SELECT 字段名1 AS 别名 FROM 表名；</p>
</li>
<li><p><em>注意：AS也可以省略，用一个空格代替。*</em></p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>条件查询</p>
<ol>
<li>WHERE子句后跟条件。</li>
<li>运算符<ul>
<li>&lt; &gt; &gt;= &lt;= &lt;&gt; =</li>
<li>BETWEEN…AND</li>
<li>IN(集合)</li>
<li>LIKE：模糊查询<ul>
<li>占位符：<ul>
<li>_：单个任意字符。</li>
<li>%：多个任意字符。</li>
</ul>
</li>
</ul>
</li>
<li>IS NULL</li>
<li>AND 或 &amp;&amp;</li>
<li>OR 或 ||</li>
<li>NOT 或 ！</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>SQL语句</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>杂谈：权限修饰符，匿名内部类....</title>
    <url>/2020/04/15/Inner/</url>
    <content><![CDATA[<h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p><strong>JAVA中有四种权限修饰符：public，protected，（default），private。</strong></p>
<p><strong>四种权限修饰符权限大小：public &gt; protected &gt; （default） &gt; private</strong></p>
<p><strong><em>注意：（default）代表什么也不加，例：class person。</em></strong></p>
<blockquote>
<p>权限修饰符在不同范围的权限</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="center">public</th>
<th align="center">protected</th>
<th align="center">(default)</th>
<th align="center">private</th>
</tr>
</thead>
<tbody><tr>
<td align="left">同一个类</td>
<td align="center">Yes</td>
<td align="center">Yes</td>
<td align="center">Yes</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="left">同一个包</td>
<td align="center">Yes</td>
<td align="center">Yes</td>
<td align="center">Yes</td>
<td align="center">No</td>
</tr>
<tr>
<td align="left">不同包子类</td>
<td align="center">Yes</td>
<td align="center">Yes</td>
<td align="center">No</td>
<td align="center">No</td>
</tr>
<tr>
<td align="left">不同包非子类</td>
<td align="center">Yes</td>
<td align="center">No</td>
<td align="center">No</td>
<td align="center">No</td>
</tr>
</tbody></table>
<hr>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>如果一个事物内部包含另一个事物，那么这就是一个类包含另一个类。</p>
<p>如：身体和心脏的关系，汽车和发动机的关系</p>
<p>分类：</p>
<ol>
<li>成员内部类</li>
<li>局部内部类（其中包含匿名内部类）</li>
</ol>
<hr>
<h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>成员内部类的定义格式：</p>
<pre><code>修饰符 class 外部类名称{
    修饰符 class 内部类名称{
        ....
    }
    .....
}</code></pre><p><strong><em>注意：内用外，可以随意访问；外用内，需要借助内部类对象。</em></strong></p>
<p>如何使用成员内部类？</p>
<ol>
<li><p>间接方式：在外部类的成员方法中，使用内部类，然后main只是调用外部类的方法。</p>
</li>
<li><p>直接方式：公式</p>
</li>
</ol>
<p><strong>外部类名称.内部类名称 对象名 = new 外部类名称（）.new 内部类名称（）；</strong>。</p>
<p>注意：内部类访问重名的外部类成员变量：<strong>外部类名称.this.成员变量名称</strong>。</p>
<hr>
<h3 id="局部内部类（匿名内部类）"><a href="#局部内部类（匿名内部类）" class="headerlink" title="局部内部类（匿名内部类）"></a>局部内部类（匿名内部类）</h3><p>如果<strong>一个类定义在一个方法内部</strong>，那么这就是一个局部内部类。</p>
<p>“局部”：只有当前所属的方法能使用它，出了这个方法外面就不能用了。</p>
<p>定义格式：</p>
<pre><code>修饰符 class 外部类名称 {
    修饰符 返回值类型 外部类方法名称（参数列表） {
        class 局部内部类名称 {
            ....
        }
    }
    .....
}</code></pre><blockquote>
<p>定义一个类的时候，权限修饰符规则：</p>
</blockquote>
<ol>
<li>外部类：public/（default）</li>
<li>成员内部类：public/protected/（default）/private</li>
<li>局部内部类：什么也不写</li>
</ol>
<p>局部内部类：如果希望<strong>访问所在方法的局部变量</strong>，那么这个局部变量必须是<strong>有效final的</strong>。</p>
<p><strong><em>备注：从java8开始，只要局部变量事实不变，那么final关键字可以省略。</em></strong></p>
<blockquote>
<p>原因：</p>
</blockquote>
<ol>
<li>new出来的对象在堆内存当中。</li>
<li>局部变量跟着方法走，在栈内存当中。</li>
<li>方法运行结束之后，立刻出栈，局部变量就会消失。</li>
<li>但是new出来的对象会在堆当中持续存在，直到垃圾回收消失。</li>
</ol>
<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类也是一种局部内部类。</p>
<p>如果接口的实现类（或者是父类的子类）<strong>只需使用唯一的一次，</strong> 那么这种情况下就可以省略掉这类的定义，而改为使用<strong>匿名内部类</strong>。</p>
<p>匿名内部类的定义格式：</p>
<pre><code>接口名称 对象名 = new 接口名称（） {
    //覆盖重写所有抽象方法
}</code></pre><p><strong><em>注意：匿名内部类，在创建对象的时候，只能使用唯一一次。</em></strong></p>
<p>如果希望多次创建对象，而且类的内容一样的话，那么就必须使用单独定义的实现类了。</p>
<hr>
<p>以上就是关于内部类的一些简要描述，如需知道更多请自己查询。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA当中的final关键字</title>
    <url>/2020/04/15/JavaFinal/</url>
    <content><![CDATA[<h2 id="关于final关键字"><a href="#关于final关键字" class="headerlink" title="关于final关键字"></a>关于final关键字</h2><p><strong>final关键字代表最终，不可改变的。</strong></p>
<p>final关键字有常见的四种用法：</p>
<ul>
<li>可以用来修饰一个类</li>
<li>可以用来修饰一个方法</li>
<li>可以用来修饰一个局部变量</li>
<li>可以用来修饰一个成员变量</li>
</ul>
<hr>
<h3 id="用final修饰一个类"><a href="#用final修饰一个类" class="headerlink" title="用final修饰一个类"></a>用final修饰一个类</h3><p>当final关键字用来修饰一个类的时候。</p>
<p>格式：</p>
<pre><code>public final class 类名称 {
        //.....
}</code></pre><p><strong>含义</strong>：当前这个类<strong>不能有任何的子类。（太监类）</strong></p>
<p><strong><em>注意：</em></strong> 一个类如果是final的，那么其中所有的成员方法都无法进行覆盖重写（因为没儿子），但是可以对父类继承的方法覆盖重写。</p>
<hr>
<h3 id="用final修饰一个方法"><a href="#用final修饰一个方法" class="headerlink" title="用final修饰一个方法"></a>用final修饰一个方法</h3><p>当final关键字来修饰一个方法的时候，这个方法就是<strong>最终方法</strong>，也就是<strong>不能被覆盖重写</strong>。</p>
<p>格式：</p>
<pre><code>修饰符 final 返回值类型 方法名称（参数列表）{
            方法体....
}</code></pre><p><strong><em>注意事项：</em></strong> 对于类、方法来说，<strong>abstract关键字与final关键字不能同时使用，因为矛盾</strong>，</p>
<hr>
<h3 id="用final修饰一个局部变量"><a href="#用final修饰一个局部变量" class="headerlink" title="用final修饰一个局部变量"></a>用final修饰一个局部变量</h3><p><strong>用final修饰局部变量可以不对其进行赋值，那么这个局部变量将会是初始值不能再改变，当然也可以对其赋值，赋值后也不能再改变。</strong></p>
<h3 id="用final修饰一个成员变量"><a href="#用final修饰一个成员变量" class="headerlink" title="用final修饰一个成员变量"></a>用final修饰一个成员变量</h3><p>对于成员变量来说，如果使用final关键字修饰，那么这个变量也照样是不可变。<strong>但是用final修饰的成员变量一定要对其手动赋值，不会再给默认值了。赋值方法有两种，妖媚直接赋值，要么通过构造方法赋值。</strong></p>
<hr>
<p>此为final关键字的一些粗略简介，更多详细信息请自己查询相关内容。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA中关于时间的一些类</title>
    <url>/2020/04/15/Date/</url>
    <content><![CDATA[<h2 id="Calendar日历类"><a href="#Calendar日历类" class="headerlink" title="Calendar日历类"></a>Calendar日历类</h2><p>java.util.Calendar:日历类</p>
<p>Calendar类是一个抽象类，里面提供了很多操作<strong>日历字段</strong>的方法：（YEAR,MONTH,DAY_OF_MONTH,HOUR）。</p>
<p>Calendar类是<strong>无法直接创建对象使用的</strong>，里面有一个<strong>静态方法</strong>叫<strong>getInstance（）</strong>，该方法返回了Calendar类的<strong>子类对象</strong>。</p>
<p><code>static Calendar getInstance()</code>：使用默认时区和语言环境获得一个日历。</p>
<p><strong>Calendar类的常用成员方法：</strong></p>
<ol>
<li><p><code>public int get(int field)</code>：返回给定日历字段的值。</p>
</li>
<li><p><code>public void set(int field, int value)</code>：将给定的日历字段设置为给定值。</p>
</li>
<li><p><code>public abstract void add(int field, int amount)</code>：根据日历的规则，为给定的日历字段添加或减去指定的时间量。</p>
</li>
<li><p><code>public Date getTime()</code>：返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的Date对象。</p>
</li>
</ol>
<p><strong>成员方法的参数：</strong></p>
<pre><code>int field：日历类的字段，可以使用Calendar类的静态成员变量获取。
public static final int YEAR = 1;           年
public static final int MONTH = 2;          月
public static final int DATE = 5;           月中的某一天
public static final int DAY_OF_MONTH = 5;   月中的某一天
public static final int HOUR = 10;          时
public static final int MINUTE = 12;        分
public static final int SECOND = 13;        秒</code></pre><hr>
<h2 id="Date日期类"><a href="#Date日期类" class="headerlink" title="Date日期类"></a>Date日期类</h2><p>java.util.Date:表示日期和时间的类</p>
<p>类Date表示特定的瞬间，精确到毫秒。</p>
<blockquote>
<p>毫秒：千分之一秒  1000毫秒等于一秒。</p>
</blockquote>
<blockquote>
<p>特定的瞬间：一个时间点，一刹那时间。</p>
</blockquote>
<p>毫秒值的作用：可以对时间和日期进行计算。</p>
<blockquote>
<p>2088-01-05到20-99-03-05到底有多少天？<br>  可以日期转换为毫秒进行计算，计算完毕，再把毫秒转换为日期。</p>
</blockquote>
<p><strong>把日期转换为毫秒：</strong><br>当前的日期：2088-01-01</p>
<p>时间原点（0毫秒）：1970年1月1日 00：00：00（英国格林威治）。</p>
<p>就是计算当前日期到时间原点之间一共经历了多少毫秒。</p>
<p><strong><em>注意：中国是东八区，所以会把时间增加八个小时，即从早上8点开始。</em></strong></p>
<p><strong>把毫秒转换为日期：</strong><br>1 天 = 24 X 60 X 60 = 86400 秒 = 86400 X 1000 = 86400000毫秒。</p>
<p><strong>Date类的构造方法</strong></p>
<p><code>Date();</code>Date类的无参构造方法,获取当前系统的日期和时间。</p>
<p><code>Date(long time);</code>Date类的有参构造方法，传递毫秒值（long类型），把毫秒值转换为日期。</p>
<p><strong>Date类的常用成员方法</strong></p>
<p><code>long getTime():</code>把日期转换为毫秒值，返回时间原点到现在系统时间之间的毫秒值（相当于System.currentTimeMillis（）；）。</p>
<hr>
<h2 id="DateFormat日期-时间格式化子类的抽象类"><a href="#DateFormat日期-时间格式化子类的抽象类" class="headerlink" title="DateFormat日期/时间格式化子类的抽象类"></a>DateFormat日期/时间格式化子类的抽象类</h2><p>java.text.DateFormat是日期/时间格式化子类的抽象类</p>
<p><strong>作用</strong>：<strong>格式化</strong>（日期 -&gt; 文本）、<strong>解析</strong>（文本-&gt; 日期）。</p>
<p><strong>成员方法：</strong></p>
<pre><code>String format(Date date)：按照指定的模式，把Date日期，格式化为符合模式的字符串。
Date parse(String source)：把符合模式的字符串，解析为一个Date日期。</code></pre><p>DateFormat类是一个<strong>抽象类，无法直接创建对象使用，可以使用DateFormat类的子类。</strong></p>
<p>java.text.SimpleDateFormat <strong>extends DateFormat</strong></p>
<p><strong>构造方法：</strong></p>
<p><code>SimpleDateFormat(String pattern)</code>：用给定的模式和默认语言环境的日期格式符号构造 SimpleDateFormat。</p>
<p><strong>参数：</strong>String pattern：传递指定的模式。</p>
<p><strong><em>模式:区分大小写。</em></strong></p>
<pre><code>y  年
M  月
d  日
H  时
m  分
s  秒</code></pre><p>写对应的模式，会把模式替换为对应的日期和时间。</p>
<blockquote>
<p>“yyyy-MM-dd HH-mm-ss”</p>
</blockquote>
<p><strong>注意：</strong>模式中的字母不能更改，但是连接模式的符号可以改变。</p>
<blockquote>
<p>“yyyy年MM月dd日 HH时mm分ss秒”</p>
</blockquote>
<hr>
<p>以上是三个关于时间和日期的类，如需了解更多请自己查询有关内容。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA中的System类与StringBuilder类</title>
    <url>/2020/04/15/SystemStringBuilder/</url>
    <content><![CDATA[<h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><p>java.lang.System类中提供了大量的<strong>静态方法</strong>，可以获取与系统相关的信息或系统级操作。</p>
<p>在System类的API文档中，<strong>常用的方法有：</strong></p>
<p><code>public static long currentTimeMillis();</code> 返回以毫秒为单位的当前时间。</p>
<p><code>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length);</code>将数组中指定数据拷贝到另一个数组中。</p>
<pre><code>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)方法
参数：
    src - 源数组。
    srcPos - 源数组中的起始位置。
    dest - 目标数组。
    destPos - 目标数据中的起始位置。
    length - 要复制的数组元素的数量。</code></pre><hr>
<h2 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h2><p>java.lang.StringBuilder类：字符串缓冲区，可以提高字符串的效率。</p>
<p>构造方法：<br><code>StringBuilder()；</code>构造一个不带任何字符的字符串生成器，其初始容量为 16 个字符。</p>
<p><code>StringBuilder(String str)；</code>构造一个字符串生成器，并初始化为指定的字符串内容。</p>
<p><strong>常用的成员方法：</strong><br><code>public StringBuilder append(...)；</code>添加任意类型数据的字符串形式，并返回当前对象自身。</p>
<p><code>public String toString()；</code>将当前的StringBuilder对象转换为String对象。</p>
<p><strong>StingBuilder与String的区别</strong></p>
<p><strong>StringBuilder对象中的内容可以改变，而String不行。</strong></p>
<hr>
<p>以上是关于这两个类的简要描述，如需知道更多请自己查询。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA中的拆装箱</title>
    <url>/2020/04/15/%E6%8B%86%E7%AE%B1%E8%A3%85%E7%AE%B1/</url>
    <content><![CDATA[<h2 id="装箱（拿int类型与Integer类型为例）"><a href="#装箱（拿int类型与Integer类型为例）" class="headerlink" title="装箱（拿int类型与Integer类型为例）"></a>装箱（拿int类型与Integer类型为例）</h2><p>装箱：把基本的数据类型包装到包装类中。</p>
<p><strong>构造方法：</strong></p>
<p><code>Integer(int value)；</code>构造一个新分配的 Integer 对象，它表示指定的 int 值。</p>
<p><code>Integer(String s)；</code>构造一个新分配的 Integer 对象，它表示 String 参数所指示的 int 值。</p>
<p><strong><em>注意：传递的字符串必须是与此包装类相同的基本类型字符串，否则会抛出异常。</em></strong></p>
<p><strong>成员方法：</strong></p>
<p><code>static Integer valueOf(int i)；</code>返回一个表示指定的 int 值的 Integer 实例。</p>
<p><code>static Integer valueOf(String s)</code>；返回保存指定的 String 的值的 Integer 对象。</p>
<hr>
<h2 id="拆箱（拿int类型与Integer类型为例）"><a href="#拆箱（拿int类型与Integer类型为例）" class="headerlink" title="拆箱（拿int类型与Integer类型为例）"></a>拆箱（拿int类型与Integer类型为例）</h2><p>拆箱：在包装类中取出基本类型的数据。</p>
<p><strong>成员方法：</strong><br><code>int intValue()；</code>以 int 类型返回该 Integer 的值。</p>
<hr>
<p>自动装箱与自动拆箱，如：</p>
<p>自动装箱   Integer integer = 1；</p>
<p>自动拆箱   integer = integer + 2;</p>
<p><strong>integer是包装类，无法进行计算，所以自动拆箱了，然后又赋值给integer，自动装箱了。</strong></p>
<p>其他基本类型与包装类之间的装箱拆箱也与此差不多。</p>
<hr>
<p>有关拆箱装箱简要描述，如需知道更多自己查询。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>一些自定义类中的方法重写：toString.....</title>
    <url>/2020/04/15/toString/</url>
    <content><![CDATA[<p>Object类中为我们提供了一些方法，当我们创建自定义类的对象后，想要使用这些方法，可能无法实现我们想要的需求，因此需要我们对Object类的一些方法进行重写。</p>
<h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><p>如果不重写此方法，直接打印输出时，toString是将其中的地址值转换为字符串，也就是打印出来的是对象的<strong>地址值</strong>，因此需要重写，才能将其中的内容转换为字符串，才能把对象中的内容打印出来。</p>
<h2 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h2><p>Object类的equals方法，<strong>默认比较的是两个对象的地址值</strong>，没有意义，所以要重写equals方法，<strong>比较两个对象的属性</strong>。</p>
<p>问题：</p>
<ul>
<li>隐含着一个多态</li>
</ul>
<p><strong><em>多态的弊端：无法使用子类的特有内容（属性和方法）</em></strong></p>
<blockquote>
<p>Object obj = p2 = new Person(“古力娜扎”，19);</p>
</blockquote>
<ul>
<li>解决：可以使用向下转型，把obj类型转换为Person。</li>
</ul>
<hr>
<p><strong><em>这些方法都可以用IDEA的自动代码生成，不用手写</em></strong></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>工具类：Arrays与Math</title>
    <url>/2020/04/04/ArraysAndMath/</url>
    <content><![CDATA[<h2 id="JAVA中的两个工具类：Arrays与Math"><a href="#JAVA中的两个工具类：Arrays与Math" class="headerlink" title="JAVA中的两个工具类：Arrays与Math"></a>JAVA中的两个工具类：Arrays与Math</h2><h3 id="1-Arrays"><a href="#1-Arrays" class="headerlink" title="1. Arrays"></a>1. Arrays</h3><p>  java.util.Arrays是一个与<strong>数组相关</strong>的工具类。里面提供了大量静态方法，用来实现<strong>数组</strong>常见的操作。</p>
<p>  <strong>其中比较常用的方法</strong></p>
<p>  <code>public static String toString(数组)</code></p>
<p>  作用：将参数数组变成字符串（按默认格式：{元素1，元素2，元素3…….}）。</p>
<p>  <code>public static void sort(数组)</code></p>
<p>  作用：按照默认升序对数组进行排序。</p>
<p>  &nbsp; &nbsp;</p>
<h3 id="2-Math"><a href="#2-Math" class="headerlink" title="2. Math"></a>2. Math</h3><p>  java.lang.Math类是数学相关的工具类，里面提供了大量的静态方法，完成与数学相关运算的操作。</p>
<p>  <strong>其中比较常用的方法</strong></p>
<p>  <code>public static double abs(double num);</code>：获取绝对值。</p>
<p>  <code>public static double ceil(double num);</code>：向上取整。</p>
<p>  <code>public static double floor(double num);</code>：向下取整。</p>
<p>  <code>public static long round(double num);</code>：四舍五入。</p>
<p>  tips： <strong><em>Math.PI代表近似圆周率常量（double）</em></strong></p>
<p>  &nbsp; &nbsp;</p>
<hr>
<p>  &nbsp; &nbsp;</p>
<p>  关于这两个工具类的常用方法简单粗略了写了一下，如过想要了解知道更多，请咨询查找有关信息，<strong>重点记住Arrays是操作数组的工具类，而Math是和数学有关的工具类</strong>。</p>
]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>Static静态</title>
    <url>/2020/04/04/Static/</url>
    <content><![CDATA[<h2 id="JAVA中Static的相关内容"><a href="#JAVA中Static的相关内容" class="headerlink" title="JAVA中Static的相关内容"></a>JAVA中Static的相关内容</h2><h3 id="Static的中文意思是静态，什么是静态？"><a href="#Static的中文意思是静态，什么是静态？" class="headerlink" title="Static的中文意思是静态，什么是静态？"></a>Static的中文意思是静态，什么是静态？</h3><p>  <strong>静态就是：</strong></p>
<p>  &nbsp; &nbsp; &nbsp; 如果一个成员变量使用了static关键字，那么这个变量不再属于对象自己，而是属于所在的类，多个对象共享同一份数据，这就是类的<strong>静态变量</strong>。</p>
<p>  &nbsp; &nbsp; &nbsp; 用static修饰的成员方法同理这就是类的<strong>静态方法</strong>。</p>
<blockquote>
<p>注意事项</p>
</blockquote>
<ol>
<li><p><strong><em>静态只能访问静态，静态不能访问非静态。</em></strong> 因为在内存当中，先有的静态内容，后有的非静态内容，先人不知道后人，后人知道先人。</p>
</li>
<li><p><strong><em>静态方法中不能用this。</em></strong> 因为this代表当前对象，通过谁调用的方法，谁就是当前对象，但是静态和对象没关系。</p>
</li>
</ol>
<p>  <strong>关于静态有一种特殊使用方法：静态代码块</strong></p>
<pre><code>public class 类名称 {
    static {
        // 静态代码块的内容
    }
} </code></pre><p>  特点：当第一次用到本类时，静态代码块执行<strong>唯一一次</strong>。当类中某一些只会用到唯一一次的代码，就可以使用静态代码块，无需再将这些代码写成一个方法，然后调用方法执行，静态代码块自己会执行。</p>
<p>  &nbsp; </p>
<hr>
<p>  &nbsp;</p>
<p>  关于静态还有很多需要深入了解的知识，这里只是浅显的讲了一下常用的东西，静态最主要的就是<strong>属于类而和创建的对象无关</strong>。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>String字符串</title>
    <url>/2020/04/04/String/</url>
    <content><![CDATA[<h2 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h2><h3 id="String字符串的特点"><a href="#String字符串的特点" class="headerlink" title="String字符串的特点"></a>String字符串的特点</h3><ol>
<li>字符串的内容永不可变 。 <strong>重点</strong></li>
<li>正是因为字符串不可变，所以字符串可以共享使用。</li>
<li>字符串效果相当于是char[] 字符数组，但是底层原理是byte[] 字节数组。</li>
</ol>
<p><strong><em>关于字符串内容永不可变</em></strong></p>
<blockquote>
<p>String str = “Hello”；<br>  str实际上是对“Hello”的引用，”Hello”才是在堆中被创建的字符串对象，里面存的的字符串内容是Hello，而str则存放的是Hello这个字符串对象的地址。<br><br>  当出现这种情况时：str = “world”；<br>  原本Hello那个字符串的内容并没有改变，只是在堆中新创建了一个world的字符串对象，而str成了world的引用，存放的是world这个字符串对象的地址。<br>  所以字符串内容是永不可变的，你感觉到的变了其实是引用地址的改变。</p>
</blockquote>
<hr>
<h3 id="创建字符串的常见方式（3-1种）"><a href="#创建字符串的常见方式（3-1种）" class="headerlink" title="创建字符串的常见方式（3+1种）"></a>创建字符串的常见方式（3+1种）</h3><p><strong>三种构造方法</strong></p>
<ol>
<li><p><code>public String();</code> 创建一个空白字符串，不含有任何内容。</p>
</li>
<li><p><code>public String(char[] array);</code> 根据字符数组的内容，来创建对应的字符串。</p>
</li>
<li><p><code>public String(byte[] array);</code> 根据字节数组的内容，来创建对应的字符串。</p>
</li>
</ol>
<p><strong>一种直接创建</strong></p>
<p>String str = “Hello”;</p>
<hr>
<h3 id="String类中常用的一些方法"><a href="#String类中常用的一些方法" class="headerlink" title="String类中常用的一些方法"></a>String类中常用的一些方法</h3><h4 id="与转换相关的方法"><a href="#与转换相关的方法" class="headerlink" title="与转换相关的方法"></a><strong><em>与转换相关的方法</em></strong></h4><p><code>public char[] toCharArray();</code> 将当前字符串拆封为字符数组作为返回值。</p>
<p><code>public byte[] getBytes();</code> 获得当前字符串底层的字节数组。</p>
<p><code>public String replace(CharSequence oldString,CharSequence newString);</code>将所有出现的老字符串替换为新字符串，返回替换之后的结果字符串。CharSequence意思就是说可以接收字符串类型。<strong>游戏中的关键字屏蔽可以用这种方法</strong></p>
<h4 id="与比较相关的方法"><a href="#与比较相关的方法" class="headerlink" title="与比较相关的方法"></a><strong><em>与比较相关的方法</em></strong></h4><p>==用于字符串的比较是对<strong>对象的地址</strong>进行比较，如果要对内容进行比较，可以用下面两个方法。</p>
<p><code>public boolean equals(Object obj);</code> 参数可以是任何对象，只有参数是一个字符串并且内容相同才会返回true，否则返回false。</p>
<blockquote>
<p>“Hello”.equals(str);<br><strong>注意</strong>：这样写比str.equals(“Hello”)好，因为str.equals(“Hello”)可能会抛出空指针异常，str是一个变量，而”Hello”.equals(str)不会抛出这个异常，因为“Hello”是一个常量，永远不会空指针。</p>
</blockquote>
<p><code>public boolean equalsIgnoreCase(String str);</code>忽略大小写进行字符串比较</p>
<blockquote>
<p>str = “ABC”;<br> “abc”.equalsIgnoreCase(str) = true;</p>
</blockquote>
<h4 id="与获取相关的一些方法"><a href="#与获取相关的一些方法" class="headerlink" title="与获取相关的一些方法"></a><strong><em>与获取相关的一些方法</em></strong></h4><p><code>public int length();</code> 获取字符串中字符的个数，拿到字符串长度。</p>
<p><code>public String concat(String str);</code> 将当前字符串和参数字符串拼接成为返回值新的字符串。</p>
<p><code>public char charAt(int index);</code> 获取指定索引位置的单个字符。</p>
<p><code>public int indexOf(String str);</code> 查找参数字符串在本字符串中首次出现的位置，若不存在则返回-1。</p>
<h4 id="字符串的截取方法"><a href="#字符串的截取方法" class="headerlink" title="字符串的截取方法"></a><strong><em>字符串的截取方法</em></strong></h4><p><code>public String substring(int index);</code> 从参数位置开始一直到字符串末尾返回新字符串。</p>
<p><code>public String substring(int begin, int end);</code> 从begin开始一直到end结束返回新字符串，<strong>包括begin不包括end</strong>。</p>
<h4 id="分割字符串的方法"><a href="#分割字符串的方法" class="headerlink" title="分割字符串的方法"></a><strong><em>分割字符串的方法</em></strong></h4><p><code>public String[] split(String regex);</code> 按照参数的规则，将字符串切割成若干部分。</p>
<p>split方法的参数实际上是一个“正则表达式”，如果用英文句点“.”进行切分，<strong>必须写“\\.”</strong>，因为需要转义。</p>
<hr>
<h3 id="基本类型与字符串类型之间的相互转换"><a href="#基本类型与字符串类型之间的相互转换" class="headerlink" title="基本类型与字符串类型之间的相互转换"></a>基本类型与字符串类型之间的相互转换</h3><p>基本类型与字符串类型之间的互相转换。</p>
<p><strong>基本类型–&gt;字符串（String）：</strong></p>
<ol>
<li><p>基本类型的值 + “”。   <strong>最简单的方法，工作中常用</strong>。</p>
</li>
<li><p>包装类的静态方法toString（参数），<strong>不是Object类的toString</strong>。</p>
</li>
</ol>
<p><code>static String toString(包装类的基本类型参数)；</code>返回一个表示指定整数的 String 对象。</p>
<ol start="3">
<li>String类的静态方法valueOf（基本类型参数）；返回参数的字符串表示形式。</li>
</ol>
<p><strong>字符串（String）–&gt;基本类型：</strong></p>
<p>使用包装类的静态方法<strong>parse基本类型名称（字符串）</strong>；</p>
<p><strong>如：Integer类：static int parseInt(String s);</strong></p>
<hr>
<h3 id="关于常量池的概念"><a href="#关于常量池的概念" class="headerlink" title="关于常量池的概念"></a>关于常量池的概念</h3><ol>
<li><p>对于引用类型来说，==进行的是地址值的比较。</p>
</li>
<li><p>双引号直接写的字符串在常量池当中，new的不在池中。</p>
<pre><code>public static void main(String[] args) {
    String str1 = &quot;a,b,c&quot;;
    String str2 = &quot;a,b,c&quot;;

    char[] array = {&apos;a&apos;, &apos;b&apos;, &apos;c&apos;};
    String str3 = new String(array);

    System.out.println(str1 == str2);   //true
    System.out.println(str1 == str3);   //false
    System.out.println(str2 == str3);   //false
}</code></pre></li>
</ol>
<p><strong>原理</strong></p>
<p><img src="https://s1.ax1x.com/2020/04/04/G0Yb9O.png" alt="Principle"></p>
<hr>
<p><br>以上是对String字符串类型有关内容的一些小小整理，想要了解更多请自己查询有关知识。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA当中的继承</title>
    <url>/2020/04/04/Extends/</url>
    <content><![CDATA[<h2 id="关于继承"><a href="#关于继承" class="headerlink" title="关于继承"></a>关于继承</h2><p>  在继承的关系中，一个子类就是一个父类，也就是说，子类可以被当作父类看待。</p>
<p>  例如父类是员工，子类是讲师，那么“讲师就是一个员工”。</p>
<h2 id="父类的格式"><a href="#父类的格式" class="headerlink" title="父类的格式"></a>父类的格式</h2><pre><code>public clss 父类名称(){
    // ...
}</code></pre><h2 id="子类的格式"><a href="#子类的格式" class="headerlink" title="子类的格式"></a>子类的格式</h2><pre><code>public class 子类名称 extends 父类名称(){
    //....
}</code></pre><blockquote>
<p>关于继承中的一些注意事项</p>
</blockquote>
<ol>
<li>在父子类的继承关系当中，如果成员变量重名，则创建子类对象时，访问有两种方式：<ul>
<li>直接通过子类对象访问成员变量：等号左边是谁则优先用谁，没有则向上找。</li>
<li>间接通过成员方法访问成员变量：该方法属于谁就优先用谁，没有则向上找。</li>
</ul>
</li>
<li>子类与父类成员方法重名，创建的对象是谁就优先用谁，否则就向上找。</li>
</ol>
<hr>
<h2 id="继承中对方法进行覆盖重写"><a href="#继承中对方法进行覆盖重写" class="headerlink" title="继承中对方法进行覆盖重写"></a>继承中对方法进行覆盖重写</h2><p><strong>要求</strong></p>
<p>1.字符类<strong>成员方法名称一样，参数列表也一样</strong>，@Override 写在方法前面，用来检测是不是有效的正确覆盖重写。（这个注解要是不写，只要满足要求，也是正确的方法覆盖重写）</p>
<p>2.<strong>子类方法的返回值必须小于等于父类方法的返回值。</strong></p>
<p><strong>例</strong>：父类中返回值类型为String类，子类中为Object类，这样是不行的，子类返回值大于父类。</p>
<p>3.<strong>子类方法的权限必须大于等于父类方法的权限修饰符</strong></p>
<p><strong>注</strong>：public &gt; protected &gt; (default) &gt; private<br>这个(default)不是关键字default，而是代表什么也不写，留空。</p>
<hr>
<h2 id="继承关系中的构造方法"><a href="#继承关系中的构造方法" class="headerlink" title="继承关系中的构造方法"></a>继承关系中的构造方法</h2><p>1.子类构造方法中有一个<strong>默认隐含</strong>的“super()”调用，所以一定是<strong>先调用的父类构造，后执行的子类构造</strong>。</p>
<p>2.可以<strong>通过super关键字来子类构造调用父类重载构造</strong>。</p>
<p>3.<strong>super的父类构造调用，必须是子类构造的第一个语句，不能一个子类构造调用多次super构造</strong>。</p>
<p><strong>父类构造方法</strong></p>
<p><code>public Fu() {System.out.println(&quot;这是一个父类无参构造方法&quot;);}</code></p>
<p><code>public Fu(int num) {System.out.println(&quot;这是一个父类有参构造方法&quot;);}</code></p>
<p><strong>子类构造方法</strong></p>
<pre><code>public Zi(){
    //        super();  //调用父类无参构造方法
    super(20);      //调用父类重载的构造方法
    System.out.println(&quot;这是一个子类构造方法&quot;);
}

 public Zi(int num){
    System.out.println(&quot;这是一个有参子类构造方法&quot;);
}</code></pre><p><strong>主方法</strong></p>
<p><strong><em>输入</em></strong></p>
<p><code>public static void main(String[] args) {Zi zi = new Zi();}</code></p>
<p><strong><em>输出</em></strong></p>
<p>这是一个父类有参构造方法（子类的无参构造中调用了父类的有参构造）</p>
<p>这是一个子类构造方法（子类的无参构造方法）</p>
<p><strong><em>输入</em></strong></p>
<p><code>public static void main(String[] args) {Zi zi = new Zi(10);}</code></p>
<p><strong><em>输出</em></strong></p>
<p>这是一个父类无参构造方法（子类的有参构造方法中默认隐含一个父类的无参构造方法）</p>
<p>这是一个有参子类构造方法（子类的有参构造方法）</p>
<hr>
<h2 id="继承中相关的抽象方法"><a href="#继承中相关的抽象方法" class="headerlink" title="继承中相关的抽象方法"></a>继承中相关的抽象方法</h2><p><strong>抽象方法</strong>：就是加上abstract关键字，然后去掉大括号，直接分号结束。</p>
<p><strong>抽象类</strong>：抽象方法所在的类，必须是抽象类才行，在class前加上abstract关键字即可。</p>
<p><strong><em>如何使用抽象类和抽象方法：</em></strong></p>
<ol>
<li><p>不能直接创建new抽象类对象。</p>
</li>
<li><p>必须用一个子类继承抽象父类。</p>
</li>
<li><p>子类必须覆盖重写父类中的所有抽象方法。</p>
<p>覆盖重写（实现）：去掉abstract关键字，补上{方法体}。</p>
</li>
<li><p>创建子类对象进行使用。</p>
</li>
</ol>
<hr>
<p>以上就是有关于继承的一些知识的简要概述，如需知道更多请自己查询相关资料。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的接口</title>
    <url>/2020/03/07/JavaInterface/</url>
    <content><![CDATA[<h2 id="关于接口"><a href="#关于接口" class="headerlink" title="关于接口"></a>关于接口</h2><p>  接口就是多个类的公共规范。</p>
<p>  接口是一种引用数据类型，最重要的内容就是其中的：抽象方法。</p>
<p>  接口与父子类继承有相似之处，可以把接口中的内容交给“实现类”来实现，接口与父子类相比，更加灵活，一个“实现类”可以<strong>多实现</strong>多个接口，而在父子类中只能<strong>单继承</strong>，一个子类只有一个父类。</p>
<h2 id="接口的定义格式"><a href="#接口的定义格式" class="headerlink" title="接口的定义格式"></a>接口的定义格式</h2><pre><code>public interface 接口名称{
    //接口方法
}</code></pre><p><strong><em>接口中的内容</em></strong><br>&nbsp; &nbsp; </p>
<ul>
<li><p>如果是java7，那么接口中可以包含的内容有：</p>
<ol>
<li><p>常量（<strong>必须使用public static final三个关键字修饰，可以省略不写，但是初学者不建议这样做，常量必须有赋值</strong>）</p>
</li>
<li><p>抽象方法（<strong>有abstract关键字修饰</strong>）</p>
</li>
</ol>
</li>
<li><p>如果是java8，还可以额外包含有：</p>
<ol start="3">
<li>默认方法（<strong>可以解决接口升级的问题，即已经有了接口的实现类以后，接口升级不会影响已经使用此接口的实现类</strong>）</li>
<li>静态方法</li>
</ol>
</li>
<li><p>如果是java9，还可以额外包含有：</p>
<ol start="5">
<li>私有方法（<strong>接口中的私有方法用来作为两个方法的公有方法，解决两个方法之间代码重复的问题。但是这个方法不应该让实现类使用，应该是私有的。有普通私有方法与静态私有方法两种，分别解决多个默认方法之间代码重复的问题与多个静态方法之间代码重复的问题</strong>）</li>
</ol>
</li>
</ul>
<p><strong><em>接口的使用步骤</em></strong><br>&nbsp; &nbsp; </p>
<ol>
<li>接口不能直接使用，必须有一个“实现类”来“实现”接口。</li>
</ol>
<p>&nbsp; &nbsp; &nbsp; &nbsp;格式：  </p>
<pre><code>public class 实现类名称 implements 接口名称 {
       //....
}</code></pre><ol start="2">
<li><p>接口的实现类<strong>必须</strong>覆盖重写（实现）接口中所有的抽象方法，如果实现类没有全部覆盖重写，那么实现类<strong>必须</strong>是抽象类。</p>
</li>
<li><p>创建实现类的对象，进行使用。</p>
</li>
</ol>
<h2 id="实现类可以多实现多个接口"><a href="#实现类可以多实现多个接口" class="headerlink" title="实现类可以多实现多个接口"></a>实现类可以多实现多个接口</h2><p>注意事项：<br>&nbsp; &nbsp;</p>
<ol>
<li><p>如果实现类实现的多个接口中，<strong>有重复的抽象方法</strong>，那么只需要覆盖重写<strong>一次</strong>即可。</p>
</li>
<li><p>如果实现类实现的多个接口中，<strong>有重复的默认方法</strong>，那么实现类必须要对重复的默认方法<strong>覆盖重写</strong>。</p>
</li>
<li><p>一个类如果<strong>直接父类中的方法与接口中的默认方法产生了冲突</strong>，优先使用父类当中的方法，<strong>父类的优先级大于接口</strong>。</p>
</li>
</ol>
<h2 id="接口与接口之间也可以多继承"><a href="#接口与接口之间也可以多继承" class="headerlink" title="接口与接口之间也可以多继承"></a>接口与接口之间也可以多继承</h2><p>注意事项：<br>&nbsp; &nbsp;</p>
<ol>
<li><p>多个父接口当中的<strong>抽象方法</strong>如果重复，没关系，因为在子接口当中本就要覆盖重写实现抽象方法。</p>
</li>
<li><p>多个父接口当中的<strong>默认方法</strong>如果重复，那么子接口必须进行默认方法的覆盖重写，而且必须要带着default关键字。</p>
</li>
</ol>
<hr>
<p>更多接口的详细信息可以咨询查找。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList</title>
    <url>/2020/03/06/JavaArrayList/</url>
    <content><![CDATA[<h2 id="Array与ArrayList的区别"><a href="#Array与ArrayList的区别" class="headerlink" title="Array与ArrayList的区别"></a>Array与ArrayList的区别</h2><p> 数组的长度不可以发生改变，但是ArrayList的<strong>长度是可以随意变化的</strong>。</p>
<h2 id="关于ArrayList"><a href="#关于ArrayList" class="headerlink" title="关于ArrayList"></a>关于ArrayList</h2><p>对于ArrayList来说，用一个尖括号<E>代表泛型。</p>
<p><strong>泛型</strong>：就是装在集合当中的所有元素，全都是统一的一种类型。</p>
<p><strong>注意</strong>：泛型 <strong>只能</strong> 是引用类型，<strong>不能</strong> 是基本类型（byte,short,int,long,float,double,boolean,char）</p>
<h2 id="如果想创建一个基本类型的ArrayList"><a href="#如果想创建一个基本类型的ArrayList" class="headerlink" title="如果想创建一个基本类型的ArrayList"></a>如果想创建一个基本类型的ArrayList</h2><p>可以使用基本类型所对应的“包装类”</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>包装类（引用类型）</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td><strong>Integer</strong></td>
</tr>
<tr>
<td>Long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>Boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td><strong>Character</strong></td>
</tr>
</tbody></table>
<h2 id="ArrayList的常用方法"><a href="#ArrayList的常用方法" class="headerlink" title="ArrayList的常用方法"></a>ArrayList的常用方法</h2><p><code>public boolean add(E e);</code>  向集合当中添加元素，参数的类型和泛型一致</p>
<p><code>public E get(int index);</code>  从集合当中获取元素，参数是索引编号，返回值就是对应位置的元素</p>
<p><code>public E remove(int index);</code>  从集合当中删除元素，参数是索引编号，返回值就是被删除的元素</p>
<p><code>public int size();</code>  获取集合的尺寸长度，返回值就是集合当中包含的元素的个数</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Scanner</title>
    <url>/2020/03/06/Scanner/</url>
    <content><![CDATA[<h2 id="关于Scanner"><a href="#关于Scanner" class="headerlink" title="关于Scanner"></a>关于Scanner</h2><p>  Scanner的作用类似于输入函数，可以把键盘的输入传递给需要用的变量。</p>
<blockquote>
<p>Scanner的使用步骤</p>
</blockquote>
<h4 id="1-导包"><a href="#1-导包" class="headerlink" title="1.导包"></a>1.导包</h4><p>  <code>import java.util.Scanner;</code></p>
<h4 id="2-创建"><a href="#2-创建" class="headerlink" title="2.创建"></a>2.创建</h4><p>  <code>Scanner sc = new Scanner(System.in);</code></p>
<p>tips：System.in表示从键盘输入。</p>
<h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h4><p><code>String str = sc.next();</code></p>
<p><code>String str = sc.nextLine();</code></p>
<p>对于字符串，有上述两种常用用法，对于第一种，遇到空格就结束，对于第二种遇到回车才结束。</p>
<p><code>String str = sc.nextInt();</code></p>
<p>对于int类型，常用用法如上所写。</p>
<hr>
<p><em>更多详细用法请查询API</em></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Random</title>
    <url>/2020/03/06/Random/</url>
    <content><![CDATA[<h2 id="关于Random"><a href="#关于Random" class="headerlink" title="关于Random"></a>关于Random</h2><p>Random类位于java.util.Random包下，可以用来生成随机序列。</p>
<p>有两种常用用法：</p>
<p><code>Random()</code> 用时间作为种子产生随机序列，随机性性强，一般产生的序列不相同。</p>
<p><code>Random(seed)</code> seed是产生随机序列的种子，只要是同一种子，每次产生的随机序列都相同。</p>
<blockquote>
<p>代码举例</p>
</blockquote>
<p>1.第一种方法产生随机序列</p>
<pre><code>Random r = new Random();
int a = nextInt(10);</code></pre><p><strong>10代表产生的随机序在0到10之间（不包括10），即[0,10)。</strong></p>
<hr>
<p>2.第二种方法产生随机序列</p>
<pre><code>Random r = new Random(10);
int a = nextInt(10);</code></pre><p><strong>每次产生的随机序列都相同。</strong></p>
<hr>
<p><em>具体更多用法可以查询API</em></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>测试1</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>

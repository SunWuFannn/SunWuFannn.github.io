<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>工具类：Arrays Math</title>
    <url>/2020/04/04/ArraysAndMath/</url>
    <content><![CDATA[<h2 id="JAVA中的两个工具类：Arrays与Math"><a href="#JAVA中的两个工具类：Arrays与Math" class="headerlink" title="JAVA中的两个工具类：Arrays与Math"></a>JAVA中的两个工具类：Arrays与Math</h2><h3 id="1-Arrays"><a href="#1-Arrays" class="headerlink" title="1. Arrays"></a>1. Arrays</h3><p>  java.util.Arrays是一个与<strong>数组相关</strong>的工具类。里面提供了大量静态方法，用来实现<strong>数组</strong>常见的操作。</p>
<p>  <strong>其中比较常用的方法</strong></p>
<p>  <code>public static String toString(数组)</code></p>
<p>  作用：将参数数组变成字符串（按默认格式：{元素1，元素2，元素3…….}）。</p>
<p>  <code>public static void sort(数组)</code></p>
<p>  作用：按照默认升序对数组进行排序。</p>
<p>  &nbsp; &nbsp;</p>
<h3 id="2-Math"><a href="#2-Math" class="headerlink" title="2. Math"></a>2. Math</h3><p>  java.lang.Math类是数学相关的工具类，里面提供了大量的静态方法，完成与数学相关运算的操作。</p>
<p>  <strong>其中比较常用的方法</strong></p>
<p>  <code>public static double abs(double num);</code><br>  ：获取绝对值。</p>
<p>  <code>public static double ceil(double num);</code><br>  ：向上取整。</p>
<p>  <code>public static double floor(double num);</code><br>  ：向下取整。</p>
<p>  <code>public static long round(double num);</code><br>  ：四舍五入。</p>
<p>  tips： <strong><em>Math.PI代表近似圆周率常量（double）</em></strong></p>
<p>  &nbsp; &nbsp;</p>
<hr>
<p>  &nbsp; &nbsp;</p>
<p>  关于这两个工具类的常用方法简单粗略了写了一下，如过想要了解知道更多，请咨询查找有关信息，<strong>重点记住Arrays是操作数组的工具类，而Math是和数学有关的工具类</strong>。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的接口</title>
    <url>/2020/03/07/JavaInterface/</url>
    <content><![CDATA[<h2 id="关于接口"><a href="#关于接口" class="headerlink" title="关于接口"></a>关于接口</h2><p>  接口就是多个类的公共规范。</p>
<p>  接口是一种引用数据类型，最重要的内容就是其中的：抽象方法。</p>
<p>  接口与父子类继承有相似之处，可以把接口中的内容交给“实现类”来实现，接口与父子类相比，更加灵活，一个“实现类”可以<strong>多实现</strong>多个接口，而在父子类中只能<strong>单继承</strong>，一个子类只有一个父类。</p>
<h2 id="接口的定义格式"><a href="#接口的定义格式" class="headerlink" title="接口的定义格式"></a>接口的定义格式</h2><pre><code>public interface 接口名称{
    //接口方法
}</code></pre><p><strong><em>接口中的内容</em></strong><br>&nbsp; &nbsp; </p>
<ul>
<li><p>如果是java7，那么接口中可以包含的内容有：</p>
<ol>
<li><p>常量（<strong>必须使用public static final三个关键字修饰，可以省略不写，但是初学者不建议这样做，常量必须有赋值</strong>）</p>
</li>
<li><p>抽象方法（<strong>有abstract关键字修饰</strong>）</p>
</li>
</ol>
</li>
<li><p>如果是java8，还可以额外包含有：</p>
<ol start="3">
<li>默认方法（<strong>可以解决接口升级的问题，即已经有了接口的实现类以后，接口升级不会影响已经使用此接口的实现类</strong>）</li>
<li>静态方法</li>
</ol>
</li>
<li><p>如果是java9，还可以额外包含有：</p>
<ol start="5">
<li>私有方法（<strong>接口中的私有方法用来作为两个方法的公有方法，解决两个方法之间代码重复的问题。但是这个方法不应该让实现类使用，应该是私有的。有普通私有方法与静态私有方法两种，分别解决多个默认方法之间代码重复的问题与多个静态方法之间代码重复的问题</strong>）</li>
</ol>
</li>
</ul>
<p><strong><em>接口的使用步骤</em></strong><br>&nbsp; &nbsp; </p>
<ol>
<li>接口不能直接使用，必须有一个“实现类”来“实现”接口。</li>
</ol>
<p>&nbsp; &nbsp; &nbsp; &nbsp;格式：  </p>
<pre><code>public class 实现类名称 implements 接口名称 {
       //....
}</code></pre><ol start="2">
<li><p>接口的实现类<strong>必须</strong>覆盖重写（实现）接口中所有的抽象方法，如果实现类没有全部覆盖重写，那么实现类<strong>必须</strong>是抽象类。</p>
</li>
<li><p>创建实现类的对象，进行使用。</p>
</li>
</ol>
<h2 id="实现类可以多实现多个接口"><a href="#实现类可以多实现多个接口" class="headerlink" title="实现类可以多实现多个接口"></a>实现类可以多实现多个接口</h2><p>注意事项：<br>&nbsp; &nbsp;</p>
<ol>
<li><p>如果实现类实现的多个接口中，<strong>有重复的抽象方法</strong>，那么只需要覆盖重写<strong>一次</strong>即可。</p>
</li>
<li><p>如果实现类实现的多个接口中，<strong>有重复的默认方法</strong>，那么实现类必须要对重复的默认方法<strong>覆盖重写</strong>。</p>
</li>
<li><p>一个类如果<strong>直接父类中的方法与接口中的默认方法产生了冲突</strong>，优先使用父类当中的方法，<strong>父类的优先级大于接口</strong>。</p>
</li>
</ol>
<h2 id="接口与接口之间也可以多继承"><a href="#接口与接口之间也可以多继承" class="headerlink" title="接口与接口之间也可以多继承"></a>接口与接口之间也可以多继承</h2><p>注意事项：<br>&nbsp; &nbsp;</p>
<ol>
<li><p>多个父接口当中的<strong>抽象方法</strong>如果重复，没关系，因为在子接口当中本就要覆盖重写实现抽象方法。</p>
</li>
<li><p>多个父接口当中的<strong>默认方法</strong>如果重复，那么子接口必须进行默认方法的覆盖重写，而且必须要带着default关键字。</p>
</li>
</ol>
<hr>
<p>更多接口的详细信息可以咨询查找。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList</title>
    <url>/2020/03/06/JavaArrayList/</url>
    <content><![CDATA[<h2 id="Array与ArrayList的区别"><a href="#Array与ArrayList的区别" class="headerlink" title="Array与ArrayList的区别"></a>Array与ArrayList的区别</h2><p> 数组的长度不可以发生改变，但是ArrayList的<strong>长度是可以随意变化的</strong>。</p>
<h2 id="关于ArrayList"><a href="#关于ArrayList" class="headerlink" title="关于ArrayList"></a>关于ArrayList</h2><p>对于ArrayList来说，用一个尖括号<E>代表泛型。</p>
<p><strong>泛型</strong>：就是装在集合当中的所有元素，全都是统一的一种类型。</p>
<p><strong>注意</strong>：泛型 <strong>只能</strong> 是引用类型，<strong>不能</strong> 是基本类型（byte,short,int,long,float,double,boolean,char）</p>
<h2 id="如果想创建一个基本类型的ArrayList"><a href="#如果想创建一个基本类型的ArrayList" class="headerlink" title="如果想创建一个基本类型的ArrayList"></a>如果想创建一个基本类型的ArrayList</h2><p>可以使用基本类型所对应的“包装类”</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>包装类（引用类型）</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td><strong>Integer</strong></td>
</tr>
<tr>
<td>Long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>Boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td><strong>Character</strong></td>
</tr>
</tbody></table>
<h2 id="ArrayList的常用方法"><a href="#ArrayList的常用方法" class="headerlink" title="ArrayList的常用方法"></a>ArrayList的常用方法</h2><p><code>public boolean add(E e);</code>  向集合当中添加元素，参数的类型和泛型一致</p>
<p><code>public E get(int index);</code>  从集合当中获取元素，参数是索引编号，返回值就是对应位置的元素</p>
<p><code>public E remove(int index);</code>  从集合当中删除元素，参数是索引编号，返回值就是被删除的元素</p>
<p><code>public int size();</code>  获取集合的尺寸长度，返回值就是集合当中包含的元素的个数</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Scanner</title>
    <url>/2020/03/06/Scanner/</url>
    <content><![CDATA[<h2 id="关于Scanner"><a href="#关于Scanner" class="headerlink" title="关于Scanner"></a>关于Scanner</h2><p>  Scanner的作用类似于输入函数，可以把键盘的输入传递给需要用的变量。</p>
<blockquote>
<p>Scanner的使用步骤</p>
</blockquote>
<h4 id="1-导包"><a href="#1-导包" class="headerlink" title="1.导包"></a>1.导包</h4><p>  <code>import java.util.Scanner;</code></p>
<h4 id="2-创建"><a href="#2-创建" class="headerlink" title="2.创建"></a>2.创建</h4><p>  <code>Scanner sc = new Scanner(System.in);</code></p>
<p>tips：System.in表示从键盘输入。</p>
<h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h4><p><code>String str = sc.next();</code></p>
<p><code>String str = sc.nextLine();</code></p>
<p>对于字符串，有上述两种常用用法，对于第一种，遇到空格就结束，对于第二种遇到回车才结束。</p>
<p><code>String str = sc.nextInt();</code></p>
<p>对于int类型，常用用法如上所写。</p>
<hr>
<p><em>更多详细用法请查询API</em></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Random</title>
    <url>/2020/03/06/Random/</url>
    <content><![CDATA[<h2 id="关于Random"><a href="#关于Random" class="headerlink" title="关于Random"></a>关于Random</h2><p>Random类位于java.util.Random包下，可以用来生成随机序列。</p>
<p>有两种常用用法：</p>
<p><code>Random()</code> 用时间作为种子产生随机序列，随机性性强，一般产生的序列不相同。</p>
<p><code>Random(seed)</code> seed是产生随机序列的种子，只要是同一种子，每次产生的随机序列都相同。</p>
<blockquote>
<p>代码举例</p>
</blockquote>
<p>1.第一种方法产生随机序列</p>
<pre><code>Random r = new Random();
int a = nextInt(10);</code></pre><p><strong>10代表产生的随机序在0到10之间（不包括10），即[0,10)。</strong></p>
<hr>
<p>2.第二种方法产生随机序列</p>
<pre><code>Random r = new Random(10);
int a = nextInt(10);</code></pre><p><strong>每次产生的随机序列都相同。</strong></p>
<hr>
<p><em>具体更多用法可以查询API</em></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>测试1</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
